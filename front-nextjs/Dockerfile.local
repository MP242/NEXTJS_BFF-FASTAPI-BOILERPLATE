
# # Utiliser une image Node.js comme base
# FROM node:20 AS build-stage

# # Créer un répertoire de travail dans le conteneur
# WORKDIR /app

# # Copier package.json and package-lock.jsondans le conteneur
# COPY package.json package-lock.json ./

# # Installer les dépendances
# RUN npm install
# RUN npm install -g next

# ARG VERCEL_URL=${VERCEL_URL}

# # Copier le source code
# COPY . .

# # # Construire l'application Next.js
# RUN npm run build

# # Stage 1, based on Nginx, to have only the compiled app, ready for production with Nginx
# FROM nginx:1

# COPY --from=build-stage /app/dist/ /usr/share/nginx/html

# COPY ./nginx.conf /etc/nginx/conf.d/default.conf
# COPY ./nginx-backend-not-found.conf /etc/nginx/extra-conf.d/backend-not-found.conf

# # Stage 1: Build the React app
# FROM node:18-alpine AS build-stage

# WORKDIR /app

# COPY package*.json ./
# RUN npm install

# COPY . .

# # Build the Next.js app
# RUN npm run build

# # Stage 2: Serve the app with Nginx
# FROM nginx:1.23-alpine

# COPY --from=build-stage /app/.next /usr/share/nginx/html/_next
# COPY --from=build-stage /app/public /usr/share/nginx/html/public

# COPY ./nginx.conf /etc/nginx/conf.d/default.conf
# COPY ./nginx-backend-not-found.conf /etc/nginx/extra-conf.d/backend-not-found.conf

# Étape de build
FROM node:18-alpine AS build-stage
WORKDIR /app

# Copier les fichiers et installer les dépendances
COPY package.json ./
COPY package-lock.json ./
RUN npm install

ARG VERCEL_URL=${VERCEL_URL}

# Copier le reste des fichiers
COPY . ./

# Build de l'application Next.js
RUN npm run build

# Étape de production
FROM node:18-alpine AS production-stage
WORKDIR /app

# Copier les fichiers nécessaires depuis l'étape de build
COPY --from=build-stage /app ./

# Installer les dépendances de production
RUN npm install --only=production

# Exposer le port sur lequel l'application Next.js sera en écoute
EXPOSE 3000

# Démarrer l'application Next.js
CMD ["npm", "start"]
